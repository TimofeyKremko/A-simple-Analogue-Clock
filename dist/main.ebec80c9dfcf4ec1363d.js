(()=>{"use strict";var e;function t(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function n(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var r={min:"min",sec:"sec",hour:"hour"},a="arrow",o=(n(e={},r.min,"".concat(a,"--min")),n(e,r.sec,"".concat(a,"--sec")),n(e,r.hour,"".concat(a,"--hour")),e),i=new WeakSet;function c(e){var t=document.createElement("div"),n=o[e];return t.classList.add(a,n),t}var u=new(function(){function e(){var t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),function(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(t=this,n=i),n.add(t)}var n,a;return n=e,(a=[{key:"getArrow",value:function(e){var t=r[e];if(!t)throw Error("Unknown type: ".concat(e));return function(e,t,n){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return n}(this,i,c).call(this,t)}}])&&t(n.prototype,a),e}());function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var l=new WeakSet;function f(e){var t=document.createElement("span");return t.innerText=e,t.classList.add("number"),t}var h=new(function(){function e(){var t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),function(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(t=this,n=l),n.add(t)}var t,n;return t=e,(n=[{key:"getNumber",value:function(e){return function(e,t,n){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return n}(this,l,f).call(this,e)}}])&&s(t.prototype,n),e}());function v(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function w(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e,t){m(e,t),t.add(e)}function m(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}function p(e,t,n){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return n}var y="clock-face",b=new WeakMap,g=new WeakSet,k=new WeakSet,E=new WeakSet,S=function(){function e(){var t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),d(this,E),d(this,k),d(this,g),n={writable:!0,value:[12,3,6,9]},m(this,t=b),t.set(this,n),this.arrows=p(this,g,T).call(this),this.numbers=p(this,k,_).call(this,function(e,t){var n=function(e,t,n){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)}(e,t);return function(e,t){return t.get?t.get.call(e):t.value}(e,n)}(this,b))}var t,n;return t=e,(n=[{key:"getClockFace",value:function(){return p(this,E,j).call(this)}}])&&w(t.prototype,n),e}();function T(){var e=u.getArrow(r.min);e.classList.add("".concat(y,"__arrow"));var t=u.getArrow(r.sec);t.classList.add("".concat(y,"__arrow"));var n=u.getArrow(r.hour);return n.classList.add("".concat(y,"__arrow")),{min:e,sec:t,hour:n}}function _(e){return e.map((function(e){var t=h.getNumber(e);return t.classList.add("".concat(y,"__number"),"".concat(y,"__number--").concat(e)),t}))}function j(){var e=document.createElement("div");e.classList.add(y);var t=document.createElement("div");t.classList.add("".concat(y,"__arrow-wrapper"));var n=this.arrows,r=n.min,a=n.sec,o=n.hour;t.append(r,a,o);var i,c=document.createElement("div");return c.classList.add("".concat(y,"__numbers-wrapper")),c.append.apply(c,function(e){if(Array.isArray(e))return v(e)}(i=this.numbers)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(i)||function(e,t){if(e){if("string"==typeof e)return v(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?v(e,t):void 0}}(i)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),e.append(t,c),e}function A(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}const C=new(function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.clockFace=new t}var t,n;return t=e,(n=[{key:"show",value:function(){return this.clockFace.getClockFace()}}])&&A(t.prototype,n),e}())(S);function L(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var O,P,W;(new(function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n;return t=e,(n=[{key:"start",value:function(){var e=C.show();console.log(e),document.body.append(e)}}])&&L(t.prototype,n),e}())).start(),O=document.querySelector(".arrow--hour"),P=document.querySelector(".arrow--min"),W=document.querySelector(".arrow--sec"),setInterval((function(){var e=new Date,t=30*e.getHours(),n=6*e.getMinutes(),r=6*e.getSeconds();O.style.transform="rotateZ(".concat(t+n/12,"deg)"),P.style.transform="rotateZ(".concat(n,"deg)"),W.style.transform="rotateZ(".concat(r,"deg)")}),0)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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R3ZCLFdBQ0UsT0FBT3JCLEtBQUtzQixVQUFVQyxvQixtQkFOcEJILEdBVU4sQ0FBeUJmLEcsc0tDVmxCLElDUUNtQixFQUNBQyxFQUNBQyxHQVJJLElERloseUIsNEZBQUEsUyxRQUFBLE8sRUFBQSxHLEVBQUEsb0JBQ0UsV0FDRSxJQUFNQyxFQUFlUCxFQUFBQSxPQUVyQlEsUUFBUUMsSUFBSUYsR0FFWnBDLFNBQVN1QyxLQUFLWixPQUFPUyxRLGlCQU56QixPQ0lJSSxRQUlJUCxFQUFhakMsU0FBU3lDLGNBQWMsZ0JBQ3BDUCxFQUFlbEMsU0FBU3lDLGNBQWMsZUFDdENOLEVBQWVuQyxTQUFTeUMsY0FBYyxlQUc1Q0MsYUFBWSxXQUNWLElBQU1DLEVBQU0sSUFBSUMsS0FFVkMsRUFBeUIsR0FBakJGLEVBQUlHLFdBQ1pDLEVBTkksRUFNTUosRUFBSUssYUFDZEMsRUFQSSxFQU9NTixFQUFJTyxhQUVwQmpCLEVBQVdrQixNQUFNQyxVQUFqQixrQkFBd0NQLEVBQVNFLEVBQVUsR0FBM0QsUUFDQWIsRUFBYWlCLE1BQU1DLFVBQW5CLGtCQUEwQ0wsRUFBMUMsUUFDQVosRUFBYWdCLE1BQU1DLFVBQW5CLGtCQUEwQ0gsRUFBMUMsVUFDQyxJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmUtNjcvLi9zcmMvY29tcG9uZW50cy9hcnJvdy9hcnJvdy5qcyIsIndlYnBhY2s6Ly9mZS02Ny8uL3NyYy9jb21wb25lbnRzL251bWJlci9udW1iZXIuanMiLCJ3ZWJwYWNrOi8vZmUtNjcvLi9zcmMvY29tcG9uZW50cy9jbG9ja0ZhY2UvY2xvY2tGYWNlLmpzIiwid2VicGFjazovL2ZlLTY3Ly4vc3JjL2NvbXBvbmVudHMvY2xvY2svY2xvY2suanMiLCJ3ZWJwYWNrOi8vZmUtNjcvLi9zcmMvYXBwLmpzIiwid2VicGFjazovL2ZlLTY3Ly4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBhcnJvd1R5cGVzID0ge1xuICBtaW46ICdtaW4nLFxuICBzZWM6ICdzZWMnLFxuICBob3VyOiAnaG91cicsXG59O1xuXG5jb25zdCBCQVNFX0NMQVNTID0gJ2Fycm93JztcblxuY29uc3QgdHlwZVRvQ3NzTW9kaWZpZXIgPSB7XG4gIFthcnJvd1R5cGVzLm1pbl06IGAke0JBU0VfQ0xBU1N9LS1taW5gLFxuICBbYXJyb3dUeXBlcy5zZWNdOiBgJHtCQVNFX0NMQVNTfS0tc2VjYCxcbiAgW2Fycm93VHlwZXMuaG91cl06IGAke0JBU0VfQ0xBU1N9LS1ob3VyYCxcbn07XG5cbmNsYXNzIEFycm93IHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgI2NyZWF0ZUVsZW1lbnQodHlwZSkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb25zdCBjc3NNb2RpZmllciA9IHR5cGVUb0Nzc01vZGlmaWVyW3R5cGVdO1xuXG4gICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKEJBU0VfQ0xBU1MsIGNzc01vZGlmaWVyKTtcblxuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG5cbiAgZ2V0QXJyb3codHlwZSkge1xuICAgIGNvbnN0IGFycm93VHlwZSA9IGFycm93VHlwZXNbdHlwZV07XG5cbiAgICBpZiAoIWFycm93VHlwZSkge1xuICAgICAgdGhyb3cgRXJyb3IoYFVua25vd24gdHlwZTogJHt0eXBlfWApO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLiNjcmVhdGVFbGVtZW50KGFycm93VHlwZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IEFycm93RmFjdG9yeSA9IG5ldyBBcnJvdygpO1xuIiwiY29uc3QgQkFTRV9DTEFTUyA9ICdudW1iZXInO1xyXG5cclxuY2xhc3MgQ2xvY2tOdW1iZXIge1xyXG4gICNjcmVhdGVFbGVtZW50KHZhbHVlKSB7XHJcbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgZWxlbWVudC5pbm5lclRleHQgPSB2YWx1ZTtcclxuXHJcbiAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoQkFTRV9DTEFTUyk7XHJcblxyXG4gICAgcmV0dXJuIGVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICBnZXROdW1iZXIodmFsdWUpIHtcclxuICAgIHJldHVybiB0aGlzLiNjcmVhdGVFbGVtZW50KHZhbHVlKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBOdW1iZXJGYWN0b3J5ID0gbmV3IENsb2NrTnVtYmVyKCk7XHJcbiIsImltcG9ydCB7IEFycm93RmFjdG9yeSwgYXJyb3dUeXBlcyB9IGZyb20gJy4uL2Fycm93L2Fycm93JztcclxuaW1wb3J0IHsgTnVtYmVyRmFjdG9yeSB9IGZyb20gJy4uL251bWJlci9udW1iZXInO1xyXG5cclxuY29uc3QgQkFTRV9DTEFTUyA9ICdjbG9jay1mYWNlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBDbG9ja0ZhY2Uge1xyXG4gICNhdmFpbGFibGVOdW1iZXJzID0gWzEyLCAzLCA2LCA5XTtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLmFycm93cyA9IHRoaXMuI2dldEFycm93cygpO1xyXG4gICAgdGhpcy5udW1iZXJzID0gdGhpcy4jZ2V0TnVtYmVycyh0aGlzLiNhdmFpbGFibGVOdW1iZXJzKTtcclxuICB9XHJcblxyXG4gICNnZXRBcnJvd3MoKSB7XHJcbiAgICBjb25zdCBtaW5BcnJvdyA9IEFycm93RmFjdG9yeS5nZXRBcnJvdyhhcnJvd1R5cGVzLm1pbik7XHJcbiAgICBtaW5BcnJvdy5jbGFzc0xpc3QuYWRkKGAke0JBU0VfQ0xBU1N9X19hcnJvd2ApO1xyXG5cclxuICAgIGNvbnN0IHNlY0Fycm93ID0gQXJyb3dGYWN0b3J5LmdldEFycm93KGFycm93VHlwZXMuc2VjKTtcclxuICAgIHNlY0Fycm93LmNsYXNzTGlzdC5hZGQoYCR7QkFTRV9DTEFTU31fX2Fycm93YCk7XHJcblxyXG4gICAgY29uc3QgaG91ckFycm93ID0gQXJyb3dGYWN0b3J5LmdldEFycm93KGFycm93VHlwZXMuaG91cik7XHJcbiAgICBob3VyQXJyb3cuY2xhc3NMaXN0LmFkZChgJHtCQVNFX0NMQVNTfV9fYXJyb3dgKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBtaW46IG1pbkFycm93LFxyXG4gICAgICBzZWM6IHNlY0Fycm93LFxyXG4gICAgICBob3VyOiBob3VyQXJyb3csXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgI2dldE51bWJlcnMoYXZhaWxhYmxlTnVtYmVycykge1xyXG4gICAgcmV0dXJuIGF2YWlsYWJsZU51bWJlcnMubWFwKG51bWJlclZhbHVlID0+IHtcclxuICAgICAgY29uc3QgbnVtYmVyRWxlbWVudCA9IE51bWJlckZhY3RvcnkuZ2V0TnVtYmVyKG51bWJlclZhbHVlKTtcclxuICAgICAgbnVtYmVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKGAke0JBU0VfQ0xBU1N9X19udW1iZXJgLCBgJHtCQVNFX0NMQVNTfV9fbnVtYmVyLS0ke251bWJlclZhbHVlfWApO1xyXG5cclxuICAgICAgcmV0dXJuIG51bWJlckVsZW1lbnQ7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gICNjcmVhdGVFbGVtZW50KCkge1xyXG4gICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKEJBU0VfQ0xBU1MpO1xyXG5cclxuICAgIGNvbnN0IGFycm93V3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgYXJyb3dXcmFwcGVyLmNsYXNzTGlzdC5hZGQoYCR7QkFTRV9DTEFTU31fX2Fycm93LXdyYXBwZXJgKTtcclxuXHJcbiAgICBjb25zdCB7IG1pbiwgc2VjLCBob3VyIH0gPSB0aGlzLmFycm93cztcclxuICAgIGFycm93V3JhcHBlci5hcHBlbmQobWluLCBzZWMsIGhvdXIpO1xyXG5cclxuICAgIGNvbnN0IG51bWJlcnNXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBudW1iZXJzV3JhcHBlci5jbGFzc0xpc3QuYWRkKGAke0JBU0VfQ0xBU1N9X19udW1iZXJzLXdyYXBwZXJgKTtcclxuXHJcbiAgICBudW1iZXJzV3JhcHBlci5hcHBlbmQoLi4udGhpcy5udW1iZXJzKTtcclxuXHJcbiAgICBlbGVtZW50LmFwcGVuZChhcnJvd1dyYXBwZXIsIG51bWJlcnNXcmFwcGVyKTtcclxuXHJcbiAgICByZXR1cm4gZWxlbWVudDtcclxuICB9XHJcblxyXG4gIGdldENsb2NrRmFjZSgpIHtcclxuICAgIHJldHVybiB0aGlzLiNjcmVhdGVFbGVtZW50KCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IENsb2NrRmFjZSB9IGZyb20gJy4uL2Nsb2NrRmFjZS9jbG9ja0ZhY2UnO1xyXG5cclxuY2xhc3MgQ2xvY2sge1xyXG4gIGNvbnN0cnVjdG9yKENsb2NrRmFjZU1vZGVsKSB7XHJcbiAgICB0aGlzLmNsb2NrRmFjZSA9IG5ldyBDbG9ja0ZhY2VNb2RlbCgpO1xyXG4gIH1cclxuXHJcbiAgc2hvdygpIHtcclxuICAgIHJldHVybiB0aGlzLmNsb2NrRmFjZS5nZXRDbG9ja0ZhY2UoKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IG5ldyBDbG9jayhDbG9ja0ZhY2UpO1xyXG4iLCJpbXBvcnQgQ2xvY2sgZnJvbSAnLi9jb21wb25lbnRzL2Nsb2NrL2Nsb2NrJztcclxuXHJcbmV4cG9ydCBjbGFzcyBBcHAge1xyXG4gIHN0YXJ0KCkge1xyXG4gICAgY29uc3QgY2xvY2tFbGVtZW50ID0gQ2xvY2suc2hvdygpO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKGNsb2NrRWxlbWVudCk7XHJcblxyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmQoY2xvY2tFbGVtZW50KTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQXBwIH0gZnJvbSAnLi9hcHAnO1xyXG5cclxuaW1wb3J0ICcuL3N0eWxlLnNjc3MnO1xyXG5cclxuY29uc3QgYXBwID0gbmV3IEFwcCgpO1xyXG5cclxuYXBwLnN0YXJ0KCk7XHJcblxyXG5cclxuZnVuY3Rpb24gY2xvY2t3b3JrKCkge1xyXG4gIGNvbnN0IGhvdXJzQXJyb3cgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYXJyb3ctLWhvdXInKTtcclxuICBjb25zdCBtaW51dGVzQXJyb3cgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYXJyb3ctLW1pbicpO1xyXG4gIGNvbnN0IHNlY29uZHNBcnJvdyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hcnJvdy0tc2VjJyk7XHJcbiAgY29uc3QgZGVnID0gNjtcclxuXHJcbiAgc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gICAgY29uc3QgZGF5ID0gbmV3IERhdGUoKTtcclxuXHJcbiAgICBjb25zdCBob3VycyA9IGRheS5nZXRIb3VycygpICogMzA7XHJcbiAgICBjb25zdCBtaW51dGVzID0gZGF5LmdldE1pbnV0ZXMoKSAqIGRlZztcclxuICAgIGNvbnN0IHNlY29uZHMgPSBkYXkuZ2V0U2Vjb25kcygpICogZGVnO1xyXG5cclxuICAgIGhvdXJzQXJyb3cuc3R5bGUudHJhbnNmb3JtID0gYHJvdGF0ZVooJHtob3VycyArIChtaW51dGVzIC8gMTIpfWRlZylgO1xyXG4gICAgbWludXRlc0Fycm93LnN0eWxlLnRyYW5zZm9ybSA9IGByb3RhdGVaKCR7bWludXRlc31kZWcpYDtcclxuICAgIHNlY29uZHNBcnJvdy5zdHlsZS50cmFuc2Zvcm0gPSBgcm90YXRlWigke3NlY29uZHN9ZGVnKWA7XHJcbiAgfSwgMCk7XHJcbn1cclxuY2xvY2t3b3JrKCk7XHJcbiJdLCJuYW1lcyI6WyJhcnJvd1R5cGVzIiwibWluIiwic2VjIiwiaG91ciIsIkJBU0VfQ0xBU1MiLCJ0eXBlVG9Dc3NNb2RpZmllciIsInR5cGUiLCJlbGVtZW50IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY3NzTW9kaWZpZXIiLCJjbGFzc0xpc3QiLCJhZGQiLCJBcnJvd0ZhY3RvcnkiLCJBcnJvdyIsImFycm93VHlwZSIsIkVycm9yIiwidGhpcyIsInZhbHVlIiwiaW5uZXJUZXh0IiwiTnVtYmVyRmFjdG9yeSIsIkNsb2NrTnVtYmVyIiwiQ2xvY2tGYWNlIiwiYXJyb3dzIiwibnVtYmVycyIsIm1pbkFycm93IiwiZ2V0QXJyb3ciLCJzZWNBcnJvdyIsImhvdXJBcnJvdyIsImF2YWlsYWJsZU51bWJlcnMiLCJtYXAiLCJudW1iZXJWYWx1ZSIsIm51bWJlckVsZW1lbnQiLCJnZXROdW1iZXIiLCJhcnJvd1dyYXBwZXIiLCJhcHBlbmQiLCJudW1iZXJzV3JhcHBlciIsIkNsb2NrIiwiQ2xvY2tGYWNlTW9kZWwiLCJjbG9ja0ZhY2UiLCJnZXRDbG9ja0ZhY2UiLCJob3Vyc0Fycm93IiwibWludXRlc0Fycm93Iiwic2Vjb25kc0Fycm93IiwiY2xvY2tFbGVtZW50IiwiY29uc29sZSIsImxvZyIsImJvZHkiLCJzdGFydCIsInF1ZXJ5U2VsZWN0b3IiLCJzZXRJbnRlcnZhbCIsImRheSIsIkRhdGUiLCJob3VycyIsImdldEhvdXJzIiwibWludXRlcyIsImdldE1pbnV0ZXMiLCJzZWNvbmRzIiwiZ2V0U2Vjb25kcyIsInN0eWxlIiwidHJhbnNmb3JtIl0sInNvdXJjZVJvb3QiOiIifQ==